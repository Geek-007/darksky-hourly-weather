#!/usr/bin/env python3


import urllib.request
import os
import json
import argparse
import datetime


def parse_args():
    parser = argparse.ArgumentParser()

    parser.add_argument(
        '--no-request', default=False,
        action='store_true', help='Use previously loaded data'
    )

    return parser.parse_args()


def get_weather_data(darksky_key, locations, args):
    for location_key, location in locations.items():
        data_path = os.path.join('data', '{}.json'.format(location_key))

        if args.no_request and os.path.isfile(data_path):
            data = json.load(open(data_path))
        else:
            url = 'https://api.darksky.net/forecast/{}/{},{}/?units=si'.format(
                darksky_key, location['latitude'], location['longitude']
            )
            data = json.loads(urllib.request.urlopen(url).read().decode())['hourly']['data']
            
            json.dump(data, open(data_path, 'w'))

        location['data'] = data


def print_weather_data(locations):
    current_date = datetime.datetime.now()
    location = locations['MAN']

    print(chr(27) + '[2J') # clear

    max_intensity = 0.0
    max_probability = 0.0

    data = location['data']
    for row in data:
        date = datetime.datetime.utcfromtimestamp(row['time'])
        if date.day != current_date.day:
            break
        if date.hour < current_date.hour:
            continue

        max_intensity = max(
            max_intensity,
            row['precipIntensity']
        )
        max_probability = max(
            max_probability,
            row['precipProbability']
        )
        
        print('{}\t{}Â°C\t{:.1f}mm, {}%\t{}'.format(
            date.strftime('%I %p'),
            round(row['temperature']),
            row['precipIntensity'],
            round(100 * row['precipProbability']),
            row['summary']   
        ))
    
    print('\nMax. precipitation intensity:\t\t{:.1f}mm'.format(
        max_intensity
    ))
    print('Max. precipitation probabiility:\t{}%'.format(
        round(100 * max_probability)
    ))


if __name__ == '__main__':
    config = json.load(open('config.json'))
    darksky_key, locations = config['key'], config['locations']

    args = parse_args()

    if not os.path.exists('data'):
        os.makedirs('data')
    
    get_weather_data(darksky_key, locations, args)
    print_weather_data(locations)